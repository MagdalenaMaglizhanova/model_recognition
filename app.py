import streamlit as st
import tensorflow as tf
import numpy as np
from PIL import Image

# –ó–∞—Ä–µ–∂–¥–∞–º–µ –º–æ–¥–µ–ª–∞ (–∞–¥–∞–ø—Ç–∏—Ä–∞–π –∏–º–µ—Ç–æ, –∞–∫–æ –µ —Ä–∞–∑–ª–∏—á–Ω–æ)
model = tf.keras.models.load_model("converted_model.keras")

st.title("–ü—Ç–∏—Ü–∏ - –†–∞–∑–ø–æ–∑–Ω–∞–≤–∞–Ω–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è üê¶")

uploaded_file = st.file_uploader("–ö–∞—á–∏ —Å–Ω–∏–º–∫–∞ –Ω–∞ –ø—Ç–∏—Ü–∞", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    image = Image.open(uploaded_file).convert("RGB")
    st.image(image, caption="–ö–∞—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_column_width=True)

    # –ü—Ä–∏–º–µ—Ä–Ω–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ—Ç–æ - –Ω–∞—Å—Ç—Ä–æ–π —Å–ø–æ—Ä–µ–¥ –≤—Ö–æ–¥–Ω–∏—è —Ä–∞–∑–º–µ—Ä –Ω–∞ —Ç–≤–æ—è –º–æ–¥–µ–ª
    img_size = (224, 224)  # —Å–º–µ–Ω–∏ –∞–∫–æ —Ç—Ä—è–±–≤–∞
    img = image.resize(img_size)
    img_array = np.array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)  # batch dimension

    if st.button("–†–∞–∑–ø–æ–∑–Ω–∞–π"):
        prediction = model.predict(img_array)
        # –¢—É–∫ —Ç—Ä—è–±–≤–∞ –¥–∞ –æ–±—Ä–∞–±–æ—Ç–∏—à output-a –Ω–∞ –º–æ–¥–µ–ª–∞ —Å–ø–æ—Ä–µ–¥ —Ç–≤–æ–∏—Ç–µ –∫–ª–∞—Å–æ–≤–µ
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –∞–∫–æ –∏–º–∞—à –∫–ª–∞—Å–æ–≤–µ –≤ —Å–ø–∏—Å—ä–∫:
        classes = ["parrot", "white stork"]  # —Å–º–µ–Ω–∏ —Å —Ç–≤–æ–∏—Ç–µ –∫–ª–∞—Å–æ–≤–µ
        predicted_class = classes[np.argmax(prediction)]

        st.write(f"–ú–æ–¥–µ–ª—ä—Ç —Ä–∞–∑–ø–æ–∑–Ω–∞–≤–∞: **{predicted_class}**")
