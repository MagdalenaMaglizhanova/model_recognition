import streamlit as st
import tensorflow as tf
import numpy as np
from PIL import Image

# –ê–∫–æ –∏–º–∞—à custom —Ñ—É–Ω–∫—Ü–∏–∏/—Å–ª–æ–µ–≤–µ, –≥–∏ –¥–æ–±–∞–≤–∏ —Ç—É–∫, –ø—Ä–∏–º–µ—Ä–Ω–æ:
# def my_custom_activation(x):
#     return tf.nn.relu(x)
# custom_objects = {"my_custom_activation": my_custom_activation}

custom_objects = {}  # <- –∞–∫–æ –Ω—è–º–∞—à custom, –æ—Å—Ç–∞–≤–∏ –ø—Ä–∞–∑–µ–Ω

# –ó–∞—Ä–µ–∂–¥–∞–º–µ –º–æ–¥–µ–ª–∞ (compile=False –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç—è–≤–∞ –≥—Ä–µ—à–∫–∏ –ø—Ä–∏ load)
model = tf.keras.models.load_model("converted_model.h5", custom_objects=custom_objects, compile=False)

st.title("–ü—Ç–∏—Ü–∏ - –†–∞–∑–ø–æ–∑–Ω–∞–≤–∞–Ω–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è üê¶")

uploaded_file = st.file_uploader("–ö–∞—á–∏ —Å–Ω–∏–º–∫–∞ –Ω–∞ –ø—Ç–∏—Ü–∞", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    image = Image.open(uploaded_file).convert("RGB")
    st.image(image, caption="–ö–∞—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_column_width=True)

    # –ù–∞—Å—Ç—Ä–æ–π —Ä–∞–∑–º–µ—Ä —Å–ø–æ—Ä–µ–¥ –º–æ–¥–µ–ª–∞ (–ø—Ä–∏–º–µ—Ä–Ω–æ 224x224)
    img_size = (224, 224)
    img = image.resize(img_size)
    img_array = np.array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)  # –î–æ–±–∞–≤—è batch —Ä–∞–∑–º–µ—Ä

    if st.button("–†–∞–∑–ø–æ–∑–Ω–∞–π"):
        prediction = model.predict(img_array)
        # –°–ø–∏—Å—ä–∫ —Å –∫–ª–∞—Å–æ–≤–µ - —Å–º–µ–Ω–∏ —Å —Ç–≤–æ–∏—Ç–µ –∫–ª–∞—Å–æ–≤–µ
        classes = ["parrot", "white stork", "other bird"]  

        predicted_class = classes[np.argmax(prediction)]
        st.write(f"–ú–æ–¥–µ–ª—ä—Ç —Ä–∞–∑–ø–æ–∑–Ω–∞–≤–∞: **{predicted_class}**")
